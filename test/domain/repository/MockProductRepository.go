// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/domain/repository/IProductRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/FelipeGadelha/ds-delivery-go/src/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIProductRepository is a mock of IProductRepository interface.
type MockIProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIProductRepositoryMockRecorder
}

// MockIProductRepositoryMockRecorder is the mock recorder for MockIProductRepository.
type MockIProductRepositoryMockRecorder struct {
	mock *MockIProductRepository
}

// NewMockIProductRepository creates a new mock instance.
func NewMockIProductRepository(ctrl *gomock.Controller) *MockIProductRepository {
	mock := &MockIProductRepository{ctrl: ctrl}
	mock.recorder = &MockIProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductRepository) EXPECT() *MockIProductRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockIProductRepository) FindAll() *[]model.Product {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]model.Product)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIProductRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIProductRepository)(nil).FindAll))
}

// FindById mocks base method.
func (m *MockIProductRepository) FindById(id string) (*model.Product, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockIProductRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockIProductRepository)(nil).FindById), id)
}

// Remove mocks base method.
func (m *MockIProductRepository) Remove(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", id)
}

// Remove indicates an expected call of Remove.
func (mr *MockIProductRepositoryMockRecorder) Remove(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIProductRepository)(nil).Remove), id)
}

// Save mocks base method.
func (m *MockIProductRepository) Save(product model.Product) (*model.Product, *error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", product)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(*error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockIProductRepositoryMockRecorder) Save(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIProductRepository)(nil).Save), product)
}
